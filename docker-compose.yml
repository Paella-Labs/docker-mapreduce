services:
  # ---------- S3 Compatible ----------
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Consola web
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  mc:
    image: minio/mc:latest
    container_name: minio-mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh", "/init/create-buckets.sh"]
    volumes:
      - ./minio/create-buckets.sh:/init/create-buckets.sh:ro
    environment:
      MC_HOST_minio: http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000
      S3_BUCKET_LOGS: ${S3_BUCKET_LOGS}
      S3_BUCKET_RESULTS: ${S3_BUCKET_RESULTS}

  # ---------- Web App que genera logs ----------
  webapp:
    build:
      context: ./webapp
    container_name: webapp
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_LOGS: ${S3_BUCKET_LOGS}
    ports:
      - "8080:8080"
    depends_on:
      minio:
        condition: service_healthy

  # ---------- Hadoop HDFS + YARN (BDE images) ----------
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    environment:
      CLUSTER_NAME: ${CLUSTER_NAME}
      CORE_CONF_fs_defaultFS: ${HDFS_NAMENODE_URI}
    ports:
      - "9870:9870"   # HDFS NameNode UI
      - "8020:8020"   # fs.defaultFS
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    healthcheck:
      test: ["CMD", "bash", "-lc", "curl -f http://localhost:9870 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    environment:
      CORE_CONF_fs_defaultFS: ${HDFS_NAMENODE_URI}
      SERVICE_PRECONDITION: "namenode:9870"
    volumes:
      - hadoop_datanode:/hadoop/dfs/data

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    environment:
      CORE_CONF_fs_defaultFS: ${HDFS_NAMENODE_URI}
      YARN_RESOURCEMANAGER_WEBAPP_ADDRESS: resourcemanager:8088
      SERVICE_PRECONDITION: "namenode:9870"
    ports:
      - "8088:8088"  # YARN UI

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    environment:
      CORE_CONF_fs_defaultFS: ${HDFS_NAMENODE_URI}
      SERVICE_PRECONDITION: "namenode:9870 resourcemanager:8088"

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    environment:
      CORE_CONF_fs_defaultFS: ${HDFS_NAMENODE_URI}
      SERVICE_PRECONDITION: "namenode:9870 resourcemanager:8088"
    ports:
      - "8188:8188"  # JobHistory UI

  # ---------- Cliente para enviar jobs ----------
  hadoop-client:
    build:
      context: ./hadoop-client
    container_name: hadoop-client
    environment:
      # HDFS/YARN
      HDFS_NAMENODE_URI: ${HDFS_NAMENODE_URI}
      YARN_RM_HOST: resourcemanager

      # MinIO / S3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      S3_BUCKET_LOGS: ${S3_BUCKET_LOGS}
      S3_BUCKET_RESULTS: ${S3_BUCKET_RESULTS}
    depends_on:
      namenode:
        condition: service_healthy
      resourcemanager:
        condition: service_started
    volumes:
      - ./hadoop-client:/job
      - ./results:/results

volumes:
  minio_data:
  hadoop_namenode:
  hadoop_datanode:
